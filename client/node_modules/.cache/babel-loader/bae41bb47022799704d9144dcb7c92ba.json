{"ast":null,"code":"var _jsxFileName = \"/Users/aayaz/Desktop/Code/streamline/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport \"antd/dist/antd.min.css\";\nimport { typeOfStatus } from \"./constant/status\";\nimport List from \"./components/List/List\";\nimport ListForm from \"./components/ListForm/ListForm\";\nimport { addChildToTask, getCurrentStatus, updateGrandparent, updateTaskById } from \"./utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  const [lastId, setLastId] = useState(0);\n  const [data, setData] = useState([]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [flatTree, setFlatTree] = useState([]);\n  let flat = new Set();\n  let checks = new Set();\n  useEffect(() => {\n    if (data.length > 0) {\n      const keys = data.map(element => getCheckedTask(element))[0];\n      const tree = data.map(element => flatten(element))[0];\n      setFlatTree(Array.from(tree));\n      setSelectedRowKeys(Array.from(keys));\n    } // eslint-disable-next-line\n\n  }, [data]);\n\n  function flatten(element) {\n    flat.add({\n      name: element.name,\n      task_id: element.task_id,\n      parentId: element.parentId\n    });\n\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        flatten(element.children[i]);\n      }\n    }\n\n    return flat;\n  }\n\n  function getCheckedTask(element) {\n    if (element.status === typeOfStatus.DONE || element.status === typeOfStatus.COMPLETE) {\n      checks.add(element.key);\n    }\n\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        getCheckedTask(element.children[i]);\n      }\n    }\n\n    return checks;\n  }\n\n  let countDependency = 0;\n  let countCompletedDependency = 0;\n\n  function searchTaskList(element, matchingId) {\n    if (element.parentId === matchingId && element.status === typeOfStatus.COMPLETE) {\n      countCompletedDependency++;\n      countDependency++;\n    } else if (element.parentId === matchingId) {\n      countDependency++;\n    } else if (element.children !== null) {\n      let result = null;\n\n      for (let i = 0; result === null && i < element.children.length; i++) {\n        result = searchTaskList(element.children[i], matchingId);\n      }\n    }\n\n    return null;\n  }\n\n  const updateTaskList = record => {\n    const dataCopy = [...data];\n    const updatedCopy = dataCopy.map(element => {\n      countDependency = 0;\n      countCompletedDependency = 0;\n      searchTaskList(element, record.task_id);\n      const currentStatus = getCurrentStatus(element, record.task_id);\n\n      switch (currentStatus) {\n        case typeOfStatus.IN_PROGRESS:\n          if (countDependency === 0 || countCompletedDependency === countDependency) {\n            updateTaskById(record.task_id, element, \"status\", typeOfStatus.COMPLETE);\n            updateParent(record.parentId, element, typeOfStatus.COMPLETE);\n          } else {\n            updateTaskById(record.task_id, element, \"status\", typeOfStatus.DONE);\n          }\n\n          break;\n\n        case typeOfStatus.COMPLETE:\n        case typeOfStatus.DONE:\n          if (record.children === null) {\n            updateTaskById(record.task_id, element, \"status\", typeOfStatus.IN_PROGRESS);\n          }\n\n          updateParent(record.parentId, element, typeOfStatus.DONE);\n          break;\n\n        default:\n          break;\n      }\n\n      return element;\n    });\n    setData([...updatedCopy]);\n  };\n\n  function updateParent(parentId, incomingData, status) {\n    if (incomingData.task_id === parentId && incomingData.status === typeOfStatus.DONE) {\n      const children = incomingData.children.length;\n      const completed = incomingData.children.filter(child => child.status === typeOfStatus.COMPLETE).length;\n\n      if (children === completed) {\n        incomingData[\"status\"] = typeOfStatus.COMPLETE;\n        incomingData[\"key\"] = uuidv4();\n        updateParent(incomingData.parentId, data, typeOfStatus.COMPLETE);\n      }\n    } else if (incomingData.task_id === parentId && incomingData.status === typeOfStatus.COMPLETE && status === typeOfStatus.DONE) {\n      incomingData[\"status\"] = typeOfStatus.DONE;\n      incomingData[\"key\"] = uuidv4(); //GP HERE\n    }\n\n    if (incomingData.children !== null && incomingData.children.length > 0) {\n      for (let i = 0; i < incomingData.children.length; i++) {\n        incomingData.children[i] = updateParent(parentId, incomingData.children[i], status);\n      }\n    }\n\n    return incomingData;\n  }\n\n  const onCreate = async _ref => {\n    let {\n      name,\n      parent\n    } = _ref;\n    const newTask = {\n      key: uuidv4(),\n      task_id: lastId + 1,\n      name,\n      status: typeOfStatus.IN_PROGRESS,\n      parentId: parent || 0,\n      children: null\n    };\n    setLastId(lastId + 1);\n\n    if (!parent) {\n      setData([...data, newTask]);\n    } else {\n      const dataCopy = [...data];\n      const updatedCopy = dataCopy.map(element => addChildToTask(parent, element, newTask));\n      setData([...updatedCopy]);\n    }\n\n    setVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: () => {\n        setVisible(true);\n      },\n      children: \"Add New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListForm, {\n      visible: visible,\n      onCreate: onCreate,\n      flatTree: flatTree,\n      onCancel: () => {\n        setVisible(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      updateTaskList: updateTaskList,\n      data: data,\n      selectedRowKeys: selectedRowKeys,\n      setSelectedRowKeys: setSelectedRowKeys\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ccpvb+YA5aF0708yR4Mxva/ajNc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Button","v4","uuidv4","typeOfStatus","List","ListForm","addChildToTask","getCurrentStatus","updateGrandparent","updateTaskById","App","visible","setVisible","lastId","setLastId","data","setData","selectedRowKeys","setSelectedRowKeys","flatTree","setFlatTree","flat","Set","checks","length","keys","map","element","getCheckedTask","tree","flatten","Array","from","add","name","task_id","parentId","children","i","status","DONE","COMPLETE","key","countDependency","countCompletedDependency","searchTaskList","matchingId","result","updateTaskList","record","dataCopy","updatedCopy","currentStatus","IN_PROGRESS","updateParent","incomingData","completed","filter","child","onCreate","parent","newTask"],"sources":["/Users/aayaz/Desktop/Code/streamline/client/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport \"antd/dist/antd.min.css\";\nimport { typeOfStatus } from \"./constant/status\";\nimport List from \"./components/List/List\";\nimport ListForm from \"./components/ListForm/ListForm\";\nimport {\n  addChildToTask,\n  getCurrentStatus,\n  updateGrandparent,\n  updateTaskById,\n} from \"./utils/helpers\";\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const [lastId, setLastId] = useState(0);\n  const [data, setData] = useState([]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [flatTree, setFlatTree] = useState([]);\n  let flat = new Set();\n  let checks = new Set();\n\n  useEffect(() => {\n    if (data.length > 0) {\n      const keys = data.map((element) => getCheckedTask(element))[0];\n      const tree = data.map((element) => flatten(element))[0];\n      setFlatTree(Array.from(tree));\n      setSelectedRowKeys(Array.from(keys));\n    }\n    // eslint-disable-next-line\n  }, [data]);\n\n  function flatten(element) {\n    flat.add({\n      name: element.name,\n      task_id: element.task_id,\n      parentId: element.parentId,\n    });\n\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        flatten(element.children[i]);\n      }\n    }\n    return flat;\n  }\n\n  function getCheckedTask(element) {\n    if (\n      element.status === typeOfStatus.DONE ||\n      element.status === typeOfStatus.COMPLETE\n    ) {\n      checks.add(element.key);\n    }\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        getCheckedTask(element.children[i]);\n      }\n    }\n    return checks;\n  }\n\n  let countDependency = 0;\n  let countCompletedDependency = 0;\n  function searchTaskList(element, matchingId) {\n    if (\n      element.parentId === matchingId &&\n      element.status === typeOfStatus.COMPLETE\n    ) {\n      countCompletedDependency++;\n      countDependency++;\n    } else if (element.parentId === matchingId) {\n      countDependency++;\n    } else if (element.children !== null) {\n      let result = null;\n      for (let i = 0; result === null && i < element.children.length; i++) {\n        result = searchTaskList(element.children[i], matchingId);\n      }\n    }\n    return null;\n  }\n\n  const updateTaskList = (record) => {\n    const dataCopy = [...data];\n    const updatedCopy = dataCopy.map((element) => {\n      countDependency = 0;\n      countCompletedDependency = 0;\n      searchTaskList(element, record.task_id);\n      const currentStatus = getCurrentStatus(element, record.task_id);\n      switch (currentStatus) {\n        case typeOfStatus.IN_PROGRESS:\n          if (\n            countDependency === 0 ||\n            countCompletedDependency === countDependency\n          ) {\n            updateTaskById(\n              record.task_id,\n              element,\n              \"status\",\n              typeOfStatus.COMPLETE\n            );\n            updateParent(record.parentId, element, typeOfStatus.COMPLETE);\n          } else {\n            updateTaskById(\n              record.task_id,\n              element,\n              \"status\",\n              typeOfStatus.DONE\n            );\n          }\n          break;\n        case typeOfStatus.COMPLETE:\n        case typeOfStatus.DONE:\n          if (record.children === null) {\n            updateTaskById(\n              record.task_id,\n              element,\n              \"status\",\n              typeOfStatus.IN_PROGRESS\n            );\n          }\n          updateParent(record.parentId, element, typeOfStatus.DONE);\n          break;\n        default:\n          break;\n      }\n      return element;\n    });\n    setData([...updatedCopy]);\n  };\n\n  function updateParent(parentId, incomingData, status) {\n    if (\n      incomingData.task_id === parentId &&\n      incomingData.status === typeOfStatus.DONE\n    ) {\n      const children = incomingData.children.length;\n      const completed = incomingData.children.filter(\n        (child) => child.status === typeOfStatus.COMPLETE\n      ).length;\n      if (children === completed) {\n        incomingData[\"status\"] = typeOfStatus.COMPLETE;\n        incomingData[\"key\"] = uuidv4();\n        updateParent(incomingData.parentId, data, typeOfStatus.COMPLETE);\n      }\n    } else if (\n      incomingData.task_id === parentId &&\n      incomingData.status === typeOfStatus.COMPLETE &&\n      status === typeOfStatus.DONE\n    ) {\n      incomingData[\"status\"] = typeOfStatus.DONE;\n      incomingData[\"key\"] = uuidv4();\n      //GP HERE\n    }\n\n    if (incomingData.children !== null && incomingData.children.length > 0) {\n      for (let i = 0; i < incomingData.children.length; i++) {\n        incomingData.children[i] = updateParent(\n          parentId,\n          incomingData.children[i],\n          status\n        );\n      }\n    }\n    return incomingData;\n  }\n\n  const onCreate = async ({ name, parent }) => {\n    const newTask = {\n      key: uuidv4(),\n      task_id: lastId + 1,\n      name,\n      status: typeOfStatus.IN_PROGRESS,\n      parentId: parent || 0,\n      children: null,\n    };\n    setLastId(lastId + 1);\n    if (!parent) {\n      setData([...data, newTask]);\n    } else {\n      const dataCopy = [...data];\n      const updatedCopy = dataCopy.map((element) =>\n        addChildToTask(parent, element, newTask)\n      );\n      setData([...updatedCopy]);\n    }\n    \n    setVisible(false);\n  };\n  return (\n    <div className=\"App\">\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          setVisible(true);\n        }}\n      >\n        Add New Task\n      </Button>\n      <ListForm\n        visible={visible}\n        onCreate={onCreate}\n        flatTree={flatTree}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      />\n      <List\n        updateTaskList={updateTaskList}\n        data={data}\n        selectedRowKeys={selectedRowKeys}\n        setSelectedRowKeys={setSelectedRowKeys}\n      />\n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}