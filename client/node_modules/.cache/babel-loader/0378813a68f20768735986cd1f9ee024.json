{"ast":null,"code":"var _jsxFileName = \"/Users/aayaz/Desktop/Code/streamline/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport \"antd/dist/antd.min.css\";\nimport { typeOfStatus } from \"./constant/status\";\nimport List from \"./components/List/List\";\nimport ListForm from \"./components/ListForm/ListForm\";\nimport { addChildToTask, getCurrentStatus, // updateParent,\nupdateTaskById } from \"./utils/helpers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  const [lastId, setLastId] = useState(0);\n  const [data, setData] = useState([{\n    key: uuidv4(),\n    task_id: 1,\n    name: \"A\",\n    status: typeOfStatus.DONE,\n    parentId: 0,\n    children: [{\n      key: uuidv4(),\n      task_id: 2,\n      name: \"B\",\n      status: typeOfStatus.DONE,\n      parentId: 1,\n      children: [{\n        key: uuidv4(),\n        task_id: 3,\n        name: \"C\",\n        status: typeOfStatus.IN_PROGRESS,\n        parentId: 2,\n        children: null\n      }]\n    }]\n  }]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [flatTree, setFlatTree] = useState([]);\n  let flat = new Set();\n  let checks = new Set();\n  useEffect(() => {\n    if (data.length > 0) {\n      let tree = [];\n      const keys = data.map(element => getCheckedTask(element))[0];\n      tree = data.map(element => flatten(element))[0];\n      setFlatTree(Array.from(tree));\n      setSelectedRowKeys(Array.from(keys));\n    } // eslint-disable-next-line\n\n  }, [data]);\n\n  function flatten(element) {\n    flat.add({\n      name: element.name,\n      task_id: element.task_id,\n      parentId: element.parentId\n    });\n\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        flatten(element.children[i]);\n      }\n    }\n\n    return flat;\n  }\n\n  function getCheckedTask(element) {\n    if (element.status === typeOfStatus.DONE || element.status === typeOfStatus.COMPLETE) {\n      checks.add(element.key);\n    }\n\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        getCheckedTask(element.children[i]);\n      }\n    }\n\n    return checks;\n  }\n\n  let countDependency = 0;\n  let countCompletedDependency = 0;\n\n  function searchTaskList(element, matchingId) {\n    if (element.parentId === matchingId && element.status === typeOfStatus.COMPLETE) {\n      countCompletedDependency++;\n      countDependency++;\n    } else if (element.parentId === matchingId) {\n      countDependency++;\n    } else if (element.children !== null) {\n      let result = null;\n\n      for (let i = 0; result === null && i < element.children.length; i++) {\n        result = searchTaskList(element.children[i], matchingId);\n      }\n    }\n\n    return null;\n  }\n\n  const updateTaskList = record => {\n    const dataCopy = [...data];\n    const updatedCopy = dataCopy.map(element => {\n      countDependency = 0;\n      countCompletedDependency = 0;\n      searchTaskList(element, record.task_id);\n      const currentStatus = getCurrentStatus(element, record.task_id);\n\n      switch (currentStatus) {\n        case typeOfStatus.IN_PROGRESS:\n          if (countDependency === 0 || countCompletedDependency === countDependency) {\n            updateTaskById(record.task_id, element, \"status\", typeOfStatus.COMPLETE);\n            updateParent(record.parentId, element, typeOfStatus.COMPLETE);\n          } else {\n            updateTaskById(record.task_id, element, \"status\", typeOfStatus.DONE);\n          }\n\n          break;\n\n        case typeOfStatus.COMPLETE:\n        case typeOfStatus.DONE:\n          if (record.children === null) {\n            updateTaskById(record.task_id, element, \"status\", typeOfStatus.IN_PROGRESS);\n          }\n\n          updateParent(record.parentId, element, typeOfStatus.DONE);\n          break;\n\n        default:\n          break;\n      }\n\n      return element;\n    });\n    setData([...updatedCopy]);\n  };\n\n  function updateParent(parentId, incomingData, status) {\n    if (incomingData.task_id === parentId && incomingData.status === typeOfStatus.DONE) {\n      const children = incomingData.children.length;\n      const completed = incomingData.children.filter(child => child.status === typeOfStatus.COMPLETE).length;\n\n      if (children === completed) {\n        incomingData[\"status\"] = typeOfStatus.COMPLETE;\n        incomingData[\"key\"] = uuidv4();\n\n        if (incomingData.parentId) {\n          data.map(element => {\n            const grandParentsStatus = getCurrentStatus(element, incomingData.parentId);\n\n            if (grandParentsStatus === typeOfStatus.DONE) {\n              updateTaskById(incomingData.parentId, element, \"status\", typeOfStatus.COMPLETE);\n            }\n          });\n        }\n      }\n    } else if (incomingData.task_id === parentId && incomingData.status === typeOfStatus.COMPLETE && status === typeOfStatus.DONE) {\n      incomingData[\"status\"] = typeOfStatus.DONE;\n      incomingData[\"key\"] = uuidv4();\n    }\n\n    if (incomingData.children !== null && incomingData.children.length > 0) {\n      for (let i = 0; i < incomingData.children.length; i++) {\n        incomingData.children[i] = updateParent(parentId, incomingData.children[i], status);\n      }\n    }\n\n    return incomingData;\n  }\n\n  const onCreate = async _ref => {\n    let {\n      name,\n      parent\n    } = _ref;\n    const newTask = {\n      key: uuidv4(),\n      task_id: lastId + 1,\n      name,\n      status: typeOfStatus.IN_PROGRESS,\n      parentId: parent || 0,\n      children: null\n    };\n    setLastId(lastId + 1);\n\n    if (!parent) {\n      setData([...data, newTask]);\n    } else {\n      const dataCopy = [...data];\n      const updatedCopy = dataCopy.map(element => addChildToTask(parent, element, newTask));\n      setData([...updatedCopy]);\n    }\n\n    setVisible(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      onClick: () => {\n        setVisible(true);\n      },\n      children: \"Add New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListForm, {\n      visible: visible,\n      onCreate: onCreate,\n      flatTree: flatTree,\n      onCancel: () => {\n        setVisible(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      updateTaskList: updateTaskList,\n      data: data,\n      selectedRowKeys: selectedRowKeys,\n      setSelectedRowKeys: setSelectedRowKeys\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"67C2mWMH+Fu+hwAsY25AjK/DVYM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Button","v4","uuidv4","typeOfStatus","List","ListForm","addChildToTask","getCurrentStatus","updateTaskById","App","visible","setVisible","lastId","setLastId","data","setData","key","task_id","name","status","DONE","parentId","children","IN_PROGRESS","selectedRowKeys","setSelectedRowKeys","flatTree","setFlatTree","flat","Set","checks","length","tree","keys","map","element","getCheckedTask","flatten","Array","from","add","i","COMPLETE","countDependency","countCompletedDependency","searchTaskList","matchingId","result","updateTaskList","record","dataCopy","updatedCopy","currentStatus","updateParent","incomingData","completed","filter","child","grandParentsStatus","onCreate","parent","newTask"],"sources":["/Users/aayaz/Desktop/Code/streamline/client/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Button } from \"antd\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport \"antd/dist/antd.min.css\";\nimport { typeOfStatus } from \"./constant/status\";\nimport List from \"./components/List/List\";\nimport ListForm from \"./components/ListForm/ListForm\";\nimport {\n  addChildToTask,\n  getCurrentStatus,\n  // updateParent,\n  updateTaskById,\n} from \"./utils/helpers\";\n\nfunction App() {\n  const [visible, setVisible] = useState(false);\n  const [lastId, setLastId] = useState(0);\n  const [data, setData] = useState([\n    {\n      key: uuidv4(),\n      task_id: 1,\n      name: \"A\",\n      status: typeOfStatus.DONE,\n      parentId: 0,\n      children: [\n        {\n          key: uuidv4(),\n          task_id: 2,\n          name: \"B\",\n          status: typeOfStatus.DONE,\n          parentId: 1,\n          children: [\n            {\n              key: uuidv4(),\n              task_id: 3,\n              name: \"C\",\n              status: typeOfStatus.IN_PROGRESS,\n              parentId: 2,\n              children: null,\n            },\n          ],\n        },\n      ],\n    },\n  ]);\n  const [selectedRowKeys, setSelectedRowKeys] = useState([]);\n  const [flatTree, setFlatTree] = useState([]);\n  let flat = new Set();\n  let checks = new Set();\n\n  useEffect(() => {\n    if (data.length > 0) {\n      let tree = [];\n      const keys = data.map((element) => getCheckedTask(element))[0];\n      tree = data.map((element) => flatten(element))[0];\n      setFlatTree(Array.from(tree));\n      setSelectedRowKeys(Array.from(keys));\n    }\n    // eslint-disable-next-line\n  }, [data]);\n\n  function flatten(element) {\n    flat.add({\n      name: element.name,\n      task_id: element.task_id,\n      parentId: element.parentId,\n    });\n\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        flatten(element.children[i]);\n      }\n    }\n    return flat;\n  }\n\n  function getCheckedTask(element) {\n    if (\n      element.status === typeOfStatus.DONE ||\n      element.status === typeOfStatus.COMPLETE\n    ) {\n      checks.add(element.key);\n    }\n    if (element.children !== null) {\n      for (let i = 0; i < element.children.length; i++) {\n        getCheckedTask(element.children[i]);\n      }\n    }\n    return checks;\n  }\n\n  let countDependency = 0;\n  let countCompletedDependency = 0;\n  function searchTaskList(element, matchingId) {\n    if (\n      element.parentId === matchingId &&\n      element.status === typeOfStatus.COMPLETE\n    ) {\n      countCompletedDependency++;\n      countDependency++;\n    } else if (element.parentId === matchingId) {\n      countDependency++;\n    } else if (element.children !== null) {\n      let result = null;\n      for (let i = 0; result === null && i < element.children.length; i++) {\n        result = searchTaskList(element.children[i], matchingId);\n      }\n    }\n    return null;\n  }\n\n  const updateTaskList = (record) => {\n    const dataCopy = [...data];\n    const updatedCopy = dataCopy.map((element) => {\n      countDependency = 0;\n      countCompletedDependency = 0;\n      searchTaskList(element, record.task_id);\n      const currentStatus = getCurrentStatus(element, record.task_id);\n      switch (currentStatus) {\n        case typeOfStatus.IN_PROGRESS:\n          if (\n            countDependency === 0 ||\n            countCompletedDependency === countDependency\n          ) {\n            updateTaskById(\n              record.task_id,\n              element,\n              \"status\",\n              typeOfStatus.COMPLETE\n            );\n            updateParent(record.parentId, element, typeOfStatus.COMPLETE);\n          } else {\n            updateTaskById(\n              record.task_id,\n              element,\n              \"status\",\n              typeOfStatus.DONE\n            );\n          }\n          break;\n        case typeOfStatus.COMPLETE:\n        case typeOfStatus.DONE:\n          if (record.children === null) {\n            updateTaskById(\n              record.task_id,\n              element,\n              \"status\",\n              typeOfStatus.IN_PROGRESS\n            );\n          }\n          updateParent(record.parentId, element, typeOfStatus.DONE);\n          break;\n        default:\n          break;\n      }\n      return element;\n    });\n    setData([...updatedCopy]);\n  };\n\n  function updateParent(parentId, incomingData, status) {\n    if (incomingData.task_id === parentId && incomingData.status === typeOfStatus.DONE) {\n      const children = incomingData.children.length;\n      const completed = incomingData.children.filter(\n        (child) => child.status === typeOfStatus.COMPLETE\n      ).length;\n      if (children === completed) {\n        incomingData[\"status\"] = typeOfStatus.COMPLETE;\n        incomingData[\"key\"] = uuidv4();\n        if (incomingData.parentId) {\n          data.map(element => {\n            const grandParentsStatus = getCurrentStatus(element, incomingData.parentId);\n            if (grandParentsStatus === typeOfStatus.DONE) {\n              updateTaskById(\n                incomingData.parentId,\n                element,\n                \"status\",\n                typeOfStatus.COMPLETE\n              );\n            }\n          }) \n        }\n      }\n    } else if (\n      incomingData.task_id === parentId &&\n      incomingData.status === typeOfStatus.COMPLETE &&\n      status === typeOfStatus.DONE\n    ) {\n      incomingData[\"status\"] = typeOfStatus.DONE;\n      incomingData[\"key\"] = uuidv4();\n    }\n\n    if (incomingData.children !== null && incomingData.children.length > 0) {\n      for (let i = 0; i < incomingData.children.length; i++) {\n        incomingData.children[i] = updateParent(parentId, incomingData.children[i], status);\n      }\n    }\n    return incomingData;\n  }\n\n  const onCreate = async ({ name, parent }) => {\n    const newTask = {\n      key: uuidv4(),\n      task_id: lastId + 1,\n      name,\n      status: typeOfStatus.IN_PROGRESS,\n      parentId: parent || 0,\n      children: null,\n    };\n    setLastId(lastId + 1);\n    if (!parent) {\n      setData([...data, newTask]);\n    } else {\n      const dataCopy = [...data];\n      const updatedCopy = dataCopy.map((element) =>\n        addChildToTask(parent, element, newTask)\n      );\n      setData([...updatedCopy]);\n    }\n    \n    setVisible(false);\n  };\n  return (\n    <div className=\"App\">\n      <Button\n        type=\"primary\"\n        onClick={() => {\n          setVisible(true);\n        }}\n      >\n        Add New Task\n      </Button>\n      <ListForm\n        visible={visible}\n        onCreate={onCreate}\n        flatTree={flatTree}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      />\n      <List\n        updateTaskList={updateTaskList}\n        data={data}\n        selectedRowKeys={selectedRowKeys}\n        setSelectedRowKeys={setSelectedRowKeys}\n      />\n    </div>\n  );\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}